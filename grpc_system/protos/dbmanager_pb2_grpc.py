# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dbmanager_pb2 as dbmanager__pb2


class DatabaseManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateDatabase = channel.unary_unary(
                '/dbmanager.DatabaseManager/CreateDatabase',
                request_serializer=dbmanager__pb2.CreateDatabaseRequest.SerializeToString,
                response_deserializer=dbmanager__pb2.DatabaseResponse.FromString,
                )
        self.SaveDatabase = channel.unary_unary(
                '/dbmanager.DatabaseManager/SaveDatabase',
                request_serializer=dbmanager__pb2.SaveDatabaseRequest.SerializeToString,
                response_deserializer=dbmanager__pb2.SaveDatabaseResponse.FromString,
                )
        self.OpenDatabase = channel.unary_unary(
                '/dbmanager.DatabaseManager/OpenDatabase',
                request_serializer=dbmanager__pb2.OpenDatabaseRequest.SerializeToString,
                response_deserializer=dbmanager__pb2.DatabaseResponse.FromString,
                )
        self.AddTable = channel.unary_unary(
                '/dbmanager.DatabaseManager/AddTable',
                request_serializer=dbmanager__pb2.AddTableRequest.SerializeToString,
                response_deserializer=dbmanager__pb2.TableResponse.FromString,
                )
        self.GetTable = channel.unary_unary(
                '/dbmanager.DatabaseManager/GetTable',
                request_serializer=dbmanager__pb2.GetTableRequest.SerializeToString,
                response_deserializer=dbmanager__pb2.TableResponse.FromString,
                )
        self.DeleteTable = channel.unary_unary(
                '/dbmanager.DatabaseManager/DeleteTable',
                request_serializer=dbmanager__pb2.DeleteTableRequest.SerializeToString,
                response_deserializer=dbmanager__pb2.TableResponse.FromString,
                )
        self.AddColumn = channel.unary_unary(
                '/dbmanager.DatabaseManager/AddColumn',
                request_serializer=dbmanager__pb2.AddColumnRequest.SerializeToString,
                response_deserializer=dbmanager__pb2.ColumnResponse.FromString,
                )
        self.AddRow = channel.unary_unary(
                '/dbmanager.DatabaseManager/AddRow',
                request_serializer=dbmanager__pb2.AddRowRequest.SerializeToString,
                response_deserializer=dbmanager__pb2.RowResponse.FromString,
                )
        self.ChangeRow = channel.unary_unary(
                '/dbmanager.DatabaseManager/ChangeRow',
                request_serializer=dbmanager__pb2.ChangeRowRequest.SerializeToString,
                response_deserializer=dbmanager__pb2.RowResponse.FromString,
                )
        self.DeleteRow = channel.unary_unary(
                '/dbmanager.DatabaseManager/DeleteRow',
                request_serializer=dbmanager__pb2.DeleteRowRequest.SerializeToString,
                response_deserializer=dbmanager__pb2.RowResponse.FromString,
                )
        self.JoinTables = channel.unary_unary(
                '/dbmanager.DatabaseManager/JoinTables',
                request_serializer=dbmanager__pb2.JoinTablesRequest.SerializeToString,
                response_deserializer=dbmanager__pb2.TableResponse.FromString,
                )


class DatabaseManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddColumn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddRow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeRow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinTables(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDatabase,
                    request_deserializer=dbmanager__pb2.CreateDatabaseRequest.FromString,
                    response_serializer=dbmanager__pb2.DatabaseResponse.SerializeToString,
            ),
            'SaveDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveDatabase,
                    request_deserializer=dbmanager__pb2.SaveDatabaseRequest.FromString,
                    response_serializer=dbmanager__pb2.SaveDatabaseResponse.SerializeToString,
            ),
            'OpenDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenDatabase,
                    request_deserializer=dbmanager__pb2.OpenDatabaseRequest.FromString,
                    response_serializer=dbmanager__pb2.DatabaseResponse.SerializeToString,
            ),
            'AddTable': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTable,
                    request_deserializer=dbmanager__pb2.AddTableRequest.FromString,
                    response_serializer=dbmanager__pb2.TableResponse.SerializeToString,
            ),
            'GetTable': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTable,
                    request_deserializer=dbmanager__pb2.GetTableRequest.FromString,
                    response_serializer=dbmanager__pb2.TableResponse.SerializeToString,
            ),
            'DeleteTable': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTable,
                    request_deserializer=dbmanager__pb2.DeleteTableRequest.FromString,
                    response_serializer=dbmanager__pb2.TableResponse.SerializeToString,
            ),
            'AddColumn': grpc.unary_unary_rpc_method_handler(
                    servicer.AddColumn,
                    request_deserializer=dbmanager__pb2.AddColumnRequest.FromString,
                    response_serializer=dbmanager__pb2.ColumnResponse.SerializeToString,
            ),
            'AddRow': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRow,
                    request_deserializer=dbmanager__pb2.AddRowRequest.FromString,
                    response_serializer=dbmanager__pb2.RowResponse.SerializeToString,
            ),
            'ChangeRow': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeRow,
                    request_deserializer=dbmanager__pb2.ChangeRowRequest.FromString,
                    response_serializer=dbmanager__pb2.RowResponse.SerializeToString,
            ),
            'DeleteRow': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRow,
                    request_deserializer=dbmanager__pb2.DeleteRowRequest.FromString,
                    response_serializer=dbmanager__pb2.RowResponse.SerializeToString,
            ),
            'JoinTables': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinTables,
                    request_deserializer=dbmanager__pb2.JoinTablesRequest.FromString,
                    response_serializer=dbmanager__pb2.TableResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dbmanager.DatabaseManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DatabaseManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbmanager.DatabaseManager/CreateDatabase',
            dbmanager__pb2.CreateDatabaseRequest.SerializeToString,
            dbmanager__pb2.DatabaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbmanager.DatabaseManager/SaveDatabase',
            dbmanager__pb2.SaveDatabaseRequest.SerializeToString,
            dbmanager__pb2.SaveDatabaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbmanager.DatabaseManager/OpenDatabase',
            dbmanager__pb2.OpenDatabaseRequest.SerializeToString,
            dbmanager__pb2.DatabaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbmanager.DatabaseManager/AddTable',
            dbmanager__pb2.AddTableRequest.SerializeToString,
            dbmanager__pb2.TableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbmanager.DatabaseManager/GetTable',
            dbmanager__pb2.GetTableRequest.SerializeToString,
            dbmanager__pb2.TableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbmanager.DatabaseManager/DeleteTable',
            dbmanager__pb2.DeleteTableRequest.SerializeToString,
            dbmanager__pb2.TableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddColumn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbmanager.DatabaseManager/AddColumn',
            dbmanager__pb2.AddColumnRequest.SerializeToString,
            dbmanager__pb2.ColumnResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddRow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbmanager.DatabaseManager/AddRow',
            dbmanager__pb2.AddRowRequest.SerializeToString,
            dbmanager__pb2.RowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeRow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbmanager.DatabaseManager/ChangeRow',
            dbmanager__pb2.ChangeRowRequest.SerializeToString,
            dbmanager__pb2.RowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbmanager.DatabaseManager/DeleteRow',
            dbmanager__pb2.DeleteRowRequest.SerializeToString,
            dbmanager__pb2.RowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JoinTables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbmanager.DatabaseManager/JoinTables',
            dbmanager__pb2.JoinTablesRequest.SerializeToString,
            dbmanager__pb2.TableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
